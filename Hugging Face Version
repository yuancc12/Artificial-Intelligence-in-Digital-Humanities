import openai
import tempfile
import os
import subprocess  # 用來調用 ffmpeg 進行音頻轉換
from flask import Flask, request, abort, jsonify
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, AudioMessage
import speech_recognition as sr

# OpenAI API Key
openai.api_key = '請輸入OpenAI key'

# 設置環境變量禁用 oneDNN 優化（可選）
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# 初始化 Flask 和 LINE Bot
app = Flask(__name__)

# LINE Messaging API 設定
line_bot_api = LineBotApi('請輸入Line API key')
handler = WebhookHandler('請輸入Line Secret')

# 接收 LINE 的 Webhook 事件
@app.route("/callback", methods=['POST'])
def callback():
    # 確認 LINE 的簽名是否正確
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return jsonify({'message': 'Invalid signature'}), 400
    return 'OK'

# 處理收到的音頻消息
@handler.add(MessageEvent, message=AudioMessage)
def handle_audio_message(event):
    message_id = event.message.id
    message_content = line_bot_api.get_message_content(message_id)

    # 保存音频到本地
    with tempfile.NamedTemporaryFile(suffix='.m4a', delete=False) as tf:
        tf.write(message_content.content)
        audio_path = tf.name

    try:
        # 將 .m4a 文件轉換為 .wav 文件
        wav_path = convert_to_wav(audio_path)

        # 使用本地語音轉文字方法將語音轉為文本
        transcript = transcribe_audio(wav_path)

        # 使用 OpenAI API 提取摘要並格式化
        summary = summarize_with_openai(transcript)
        reply_message = f"{summary}"

        # 回復用戶
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_message))
    except Exception as e:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"抱歉，無法處理您的錄音。錯誤信息: {str(e)}"))

# 將 .m4a 轉換為 .wav 的函數
def convert_to_wav(audio_path):
    wav_path = audio_path.replace('.m4a', '.wav')
    try:
        subprocess.run(['ffmpeg', '-i', audio_path, wav_path], check=True)
        return wav_path
    except subprocess.CalledProcessError as e:
        raise Exception(f"音頻轉換失敗: {e}")

# 定義語音轉文字函數（使用 SpeechRecognition 庫）
def transcribe_audio(audio_path):
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(audio_path) as source:
            audio = recognizer.record(source)  # 讀取音頻文件
            # 使用 Google Web API 進行語音識別
            transcript = recognizer.recognize_google(audio, language="zh-CN")
            return transcript
    except sr.UnknownValueError:
        return "無法識別音訊內容。"
    except sr.RequestError as e:
        return f"語音識別服務不可用: {e}"

# 使用 OpenAI 提取摘要
def summarize_with_openai(transcript):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "你是一個有用的會議記錄助手，幫助用戶開會的重點進行記錄，列點給我，不要多說別的東西。"},
            {"role": "user", "content": f"請總結以下文本的重點：{transcript}"}
        ]
    )

    summary = response['choices'][0]['message']['content']
    return summary

# 啟動 Flask 應用
if __name__ == "__main__":
    app.run(port=5000, debug=True)
